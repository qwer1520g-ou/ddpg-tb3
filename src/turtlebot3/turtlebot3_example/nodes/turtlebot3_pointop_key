#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
from geometry_msgs.msg import Twist, Point, Quaternion
from std_msgs.msg import String,Float32,Float32MultiArray
import tf
from math import radians, copysign, sqrt, pow, pi, atan2
from tf.transformations import euler_from_quaternion
import numpy as np

msg = """
control your Turtlebot3!
-----------------------
Insert xyz - coordinate.
x : position x (m)
y : position y (m)
z : orientation z (degree: -180 ~ 180)
If you want to close, insert 's'
-----------------------
"""


class GotoPoint():
    def __init__(self):
        self.goal_x=0
        self.goal_y=0
        self.tempt_x=0
        self.tempt_y=0
        self.tempt_r=0

        #self.goal_z=0
        rospy.init_node('turtlebot3_pointop_key', anonymous=False)
        #rospy.init_node('turtlebot3_pointop_key', anonymous=True)
        rospy.on_shutdown(self.shutdown)
        self.cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size=5)

        self.vel_para = rospy.Subscriber('vel_para', Float32MultiArray, self.point_callback)

        position = Point()
        

        move_cmd = Twist()
        r = rospy.Rate(10)
        self.tf_listener = tf.TransformListener()
        self.odom_frame = 'odom'

        try:
            self.tf_listener.waitForTransform(self.odom_frame, 'base_footprint', rospy.Time(), rospy.Duration(1.0))
            self.base_frame = 'base_footprint'
        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            try:
                self.base_frame = 'base_link'
            except (tf.Exception, tf.ConnectivityException, tf.LookupException):
                rospy.loginfo("Cannot find transform between odom and base_link or base_footprint")
                rospy.signal_shutdown("tf Exception")

        (position, rotation) = self.get_odom()
        self.tempt_x,self.tempt_y=position.x,position.y
        path_angle = atan2(self.goal_y - position.y, self.goal_x- position.x)
        #print "position",position,rotation
        last_rotation = 0
        linear_speed = 1
        angular_speed = 0.5
        
        
        goal_distance = sqrt(pow(self.goal_x - 0, 2) + pow(self.goal_y - 0, 2))
        distance = goal_distance
        print "distance:",distance,"self.goal_x:",self.goal_x,"self.goal_y:",self.goal_y
        while distance > 0.01:
            #print 'in while------------',self.finished
            (position, rotation) = self.get_odom()
            

            x_start = position.x-self.tempt_x
            y_start = position.y-self.tempt_y
            #rotation= rotation-self.tempt_r
            
     
            distance = sqrt(pow((self.goal_x - x_start), 2) + pow((self.goal_y - y_start), 2))
            path_angle = atan2(self.goal_y - y_start, self.goal_x- x_start) 

            move_cmd.linear.x = min(linear_speed * distance, 0.05)
            
             
            #print "move_cmd.linear.x:",move_cmd.linear.x       
            print "distance",distance,"path_angle",path_angle,"\n","self.goal_x:",self.goal_x,"self.goal_y:",self.goal_y,"x_start:",x_start,"y_start:",y_start
            #print "self.goal_x",self.goal_x,"x_start",x_start
            
            #if self.goal_x!=0 or self.goal_y!=0 or self.goal_z!=0:
            if path_angle < -pi/4 or path_angle > pi/4:
                if self.goal_y < 0 and y_start < self.goal_y:
                    path_angle = -2*pi + path_angle
                elif self.goal_y >= 0 and y_start > self.goal_y:
                    path_angle = 2*pi + path_angle
            if last_rotation > pi-0.1 and rotation <= 0:
                rotation = 2*pi + rotation
            elif last_rotation < -pi+0.1 and rotation > 0:
                rotation = -2*pi + rotation

            move_cmd.angular.z = angular_speed * path_angle-rotation   
            

            if move_cmd.angular.z > 0:
                move_cmd.angular.z = min(move_cmd.angular.z, 0.2)
            else:
                move_cmd.angular.z = max(move_cmd.angular.z, -0.2)
            
            #if self.goal_x!=0 or self.goal_y!=0:
                
            self.cmd_vel.publish(move_cmd)
            r.sleep()

        (position, rotation) = self.get_odom()
        #self.tempt_x,self.tempt_y=position.x,position.y
        #print "distance",distance
        #self.tempt_r=rotation
        
        '''
        while abs(rotation - self.goal_z) > 0.05:
            print 'rotation:',rotation,'goal_z:',self.goal_z,'  ',bs(rotation - self.goal_z)
            (position, rotation) = self.get_odom()
            if self.goal_z >= 0:
                if rotation <= self.goal_z and rotation >= self.goal_z - pi:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = 0.5
                else:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = -0.5
            else:
                if rotation <= self.goal_z + pi and rotation > self.goal_z:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = -0.5
                else:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = 0.5
            if self.goal_x!=0 or self.goal_y!=0 or self.goal_z!=0:
                self.cmd_vel.publish(move_cmd)
                r.sleep()
        '''
        #rospy.loginfo("Stopping the robot...")
        #self.cmd_vel.publish(Twist())

    
    def point_callback(self,data):
        #print(data.data[2])
        #global goal_x,goal_y,goal_z
        #print "self.goal_x:",data.data[0],"self.goal_y:",data.data[1]
        #self.goal_x,self.goal_y=data.data[0],data.data[1]
        #print "self.goal_x",self.goal_x,"self.goal_y",self.goal_y
        #print '--------------',self.finished
        #if self.finished is True:
        
           

        if abs(data.data[1])<0.021:
            self.goal_x,self.goal_y=data.data[0],0
        else:
            self.goal_x,self.goal_y=data.data[0],-data.data[1]

        
        
    def getkey(self):
        

        
        #x, y, z = raw_input("| x | y | z |\n").split()
        x , y, z = 0.5,0.5,90
        if x == 's':
            self.shutdown()
        x, y, z = [float(x), float(y), float(z)]
        return x, y, z

    def get_odom(self):
        try:
            (trans, rot) = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))
            rotation = euler_from_quaternion(rot)

        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            rospy.loginfo("TF Exception")
            return

        return (Point(*trans), rotation[2])


    def shutdown(self):
        self.cmd_vel.publish(Twist())
        rospy.sleep(1)


if __name__ == '__main__':
    try:
        while not rospy.is_shutdown():
        #while True:
            print(msg)
            GotoPoint()
        
            
    except:
        rospy.loginfo("shutdown program.")

